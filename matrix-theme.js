/**
 * Matrix Theme Module
 * Contains all Matrix-specific functionality
 * The default theme with green terminal aesthetics and Matrix rain effects
 */

// Matrix theme variables
let matrixKanjiInterval;
let matrixParticles = [];

/**
 * Initialize and activate the Matrix theme
 * This is the main entry point for the Matrix theme
 */
function initMatrixTheme() {
    console.log('‚ö° Initializing Matrix theme...');
    
    // Ensure theme is properly set (should already be done by switchToTheme)
    currentTheme = 'matrix';
    
    // Start Matrix-specific effects
    if (!isMobileDevice) {
        initParticles();
    }
    initMatrixKanjiRotation();
    initMatrixSpecialClick();
    
    console.log('‚ö° MATRIX THEME ACTIVATED ‚ö°');
}

/**
 * Switch to Matrix theme and initialize all effects
 */
function switchToMatrixTheme() {
    // Set theme
    if (typeof currentTheme !== 'undefined') {
        currentTheme = 'matrix';
    }
    
    // Remove other theme classes
    document.body.classList.remove('lcars-theme', 'thor-theme');
    document.body.classList.add('matrix-theme');
    
    // Show/hide backgrounds
    const matrixBg = document.getElementById('matrixBg');
    const lcarsBg = document.getElementById('lcarsBg');
    const thorBg = document.getElementById('thorBg');
    
    if (matrixBg) matrixBg.classList.remove('hidden');
    if (lcarsBg) lcarsBg.classList.add('hidden');
    if (thorBg) thorBg.classList.add('hidden');
    
    // Stop other effects - check if cleanup functions exist
    if (typeof cleanupLcarsTheme === 'function') {
        cleanupLcarsTheme();
    }
    if (typeof cleanupThorEffects === 'function') {
        cleanupThorEffects();
    }
    
    // Start Matrix effects (only if not mobile)
    if (typeof isMobileDevice === 'undefined' || !isMobileDevice) {
        initMatrixParticles();
    }
    initMatrixKanjiRotation();
    
    // Update labels
    updateMatrixLabels();
    
    console.log('‚ö° MATRIX INTERFACE ACTIVATED ‚ö°');
}

/**
 * Update theme labels for Matrix theme
 */
function updateMatrixLabels() {
    const timezoneLabel = document.querySelector('.timezone-label');
    const cityLabel = document.querySelector('.city-label');
    
    if (timezoneLabel) timezoneLabel.textContent = '‚ö° TEMPORAL ZONE CONTROL ‚ö°';
    if (cityLabel) cityLabel.textContent = 'üåê WEATHER DATA INTERFACE';
}

/**
 * Initialize Matrix-style flowing columns
 */
function initMatrixParticles() {
    const particlesContainer = document.getElementById('particles');
    if (!particlesContainer) return;
    
    // Clear existing particles
    particlesContainer.innerHTML = '';
    matrixParticles = [];
    
    const matrixChars = [
        '0', '1', '„Ç¢', '„Ç§', '„Ç¶', '„Ç®', '„Ç™', '„Ç´', '„Ç≠', '„ÇØ', '„Ç±', '„Ç≥', 
        '„Çµ', '„Ç∑', '„Çπ', '„Çª', '„ÇΩ', '„Çø', '„ÉÅ', '„ÉÑ', '„ÉÜ', '„Éà', '„Éä', '„Éã', 
        '„Éå', '„Éç', '„Éé', '„Éè', '„Éí', '„Éï', '„Éò', '„Éõ', '„Éû', '„Éü', '„É†', '„É°', 
        '„É¢', '„É§', '„É¶', '„É®', '„É©', '„É™', '„É´', '„É¨', '„É≠', '„ÉØ', '„É≤', '„É≥',
        'Êó•', 'Êúà', 'ÁÅ´', 'Ê∞¥', 'Êú®', 'Èáë', 'Âúü', '‰∫∫', 'Â§ß', 'Â∞è', '‰∏≠', 'ÂõΩ',
        '‰∏Ä', '‰∫å', '‰∏â', 'Âõõ', '‰∫î', 'ÂÖ≠', '‰∏É', 'ÂÖ´', '‰πù', 'ÂçÅ', 'Áôæ', 'ÂçÉ',
        '‰∏á', 'ÂÜÜ', 'ÊôÇ', 'ÂàÜ', 'Âπ¥', 'Èñì', '‰ªä', 'Âæå', 'Ââç', 'Êñ∞', 'Âè§', 'È´ò',
        '‰Ωé', '‰∏ä', '‰∏ã', 'Â∑¶', 'Âè≥', 'Êù±', 'Ë•ø', 'Âçó', 'Âåó'
    ];
    
    // Create columns across the full screen width
    const columnWidth = 60;
    const numColumns = Math.floor(window.innerWidth / columnWidth);
    
    for (let col = 0; col < numColumns; col++) {
        createMatrixColumn(col, columnWidth, matrixChars, particlesContainer);
    }
}

/**
 * Create a single Matrix column
 */
function createMatrixColumn(columnIndex, columnWidth, matrixChars, container) {
    const columnLength = 5 + Math.floor(Math.random() * 45);
    const columnX = columnIndex * columnWidth;
    const animationDelay = Math.random() * 5;
    const fallSpeed = 8 + Math.random() * 12;
    
    const blurLevels = [2.0, 3.5, 5.5, 7.5, 10.0];
    const fontSizes = [22, 18, 15, 12, 9];
    const blurIndex = Math.floor(Math.random() * blurLevels.length);
    const columnBlur = blurLevels[blurIndex];
    const columnFontSize = fontSizes[blurIndex];
    
    for (let i = 0; i < columnLength; i++) {
        const char = document.createElement('div');
        char.className = 'matrix-column-char';
        char.style.left = columnX + 'px';
        char.style.top = (-30 - (i * 25)) + 'px';
        char.style.animationDelay = animationDelay + 's';
        char.style.animationDuration = fallSpeed + 's';
        char.style.opacity = Math.max(0.1, 1 - (i * 0.05));
        
        char.style.filter = `blur(${columnBlur}px)`;
        char.style.fontSize = columnFontSize + 'px';
        
        const rotations = [0, 90, 180, 270];
        const randomRotation = rotations[Math.floor(Math.random() * rotations.length)];
        char.style.setProperty('--char-rotation', `rotate(${randomRotation}deg)`);
        
        const randomChar = matrixChars[Math.floor(Math.random() * matrixChars.length)];
        char.textContent = randomChar;
        
        container.appendChild(char);
        matrixParticles.push(char);
        
        registerEventListener(char, 'animationend', () => {
            restartMatrixColumn(char, columnIndex, columnWidth, matrixChars, container, columnLength);
        });
    }
}

/**
 * Restart Matrix column when animation ends
 */
function restartMatrixColumn(triggerChar, columnIndex, columnWidth, matrixChars, container, originalLength) {
    const existingChars = container.querySelectorAll('.matrix-column-char');
    existingChars.forEach(char => {
        if (parseInt(char.style.left) === columnIndex * columnWidth) {
            const index = matrixParticles.indexOf(char);
            if (index > -1) {
                matrixParticles.splice(index, 1);
            }
            char.remove();
        }
    });
    
    createMatrixColumn(columnIndex, columnWidth, matrixChars, container);
}

/**
 * Matrix kanji rotation
 */
function initMatrixKanjiRotation() {
    if (matrixKanjiInterval) {
        clearInterval(matrixKanjiInterval);
    }
    
    const matrixKanji = [
        'ÊôÇ', 'Á©∫', 'Â§¢', 'È≠Ç', 'ÂøÉ', 'ÂÖâ', 'ÂΩ±', 'Áúü', 'ÂÅΩ', 'Áèæ', 'Âπª', 'Âßã', 'ÁµÇ',
        'ÈÅì', 'Âäõ', 'ÊÑõ', 'Ê≠ª', 'Áîü', 'ÈÅã', 'ÈÅ∏', 'Ëá™', 'Áî±', 'Êùü', 'Á∏õ', 'Ëß£', 'Êîæ',
        'Áü•', 'ÁÑ°', 'Êúâ', '‰∏Ä', '‰∫å', '‰∏â', 'Âõõ', '‰∫î', 'ÂÖ≠', '‰∏É', 'ÂÖ´', '‰πù', 'ÂçÅ',
        'Áôæ', 'ÂçÉ', '‰∏á', 'ÂÑÑ', 'ÂÖÜ'
    ];
    
    matrixKanjiInterval = registerInterval(setInterval(() => {
        const kanjiElements = document.querySelectorAll('.matrix-column-char');
        kanjiElements.forEach(char => {
            if (Math.random() < 0.3) {
                const randomKanji = matrixKanji[Math.floor(Math.random() * matrixKanji.length)];
                char.textContent = randomKanji;
            }
        });
    }, 3000));
}

/**
 * Create white rabbit effect on click
 */
function createWhiteRabbit(clickX, clickY) {
    const rabbit = document.createElement('div');
    rabbit.innerHTML = 'üê∞';
    rabbit.style.position = 'fixed';
    rabbit.style.left = clickX + 'px';
    rabbit.style.top = clickY + 'px';
    rabbit.style.fontSize = '24px';
    rabbit.style.zIndex = '10000';
    rabbit.style.pointerEvents = 'none';
    rabbit.style.animation = 'fadeInOut 2s ease-out forwards';
    
    document.body.appendChild(rabbit);
    
    setTimeout(() => {
        if (rabbit.parentNode) {
            rabbit.parentNode.removeChild(rabbit);
        }
    }, 2000);
}

/**
 * Handle Matrix theme click events
 */
function handleMatrixClick(clickX, clickY) {
    console.log('Matrix click detected - creating white rabbit');
    createWhiteRabbit(clickX, clickY);
}

/**
 * Clean up Matrix effects
 */
function cleanupMatrixTheme() {
    if (matrixKanjiInterval) {
        clearInterval(matrixKanjiInterval);
        matrixKanjiInterval = null;
    }
    
    const particlesContainer = document.getElementById('particles');
    if (particlesContainer) {
        particlesContainer.innerHTML = '';
    }
    
    matrixParticles = [];
    
    console.log('üîå Matrix theme cleaned up');
}

// Export functions for module usage
if (typeof module !== 'undefined' && module.exports) {
    // Node.js environment
    module.exports = {
        initMatrixTheme,
        switchToMatrixTheme,
        handleMatrixClick,
        cleanupMatrixTheme,
        updateMatrixLabels
    };
} else if (typeof window !== 'undefined') {
    // Browser environment - attach to window object
    window.MatrixTheme = {
        initMatrixTheme,
        switchToMatrixTheme,
        handleMatrixClick,
        cleanupMatrixTheme,
        updateMatrixLabels
    };
}